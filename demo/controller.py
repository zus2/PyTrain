from pybricks.hubs import ThisHub
from pybricks.pupdevices import DCMotor, Light, Remote
from pybricks.parameters import Button, Color, Direction, Port, Side, Stop
from pybricks.robotics import DriveBase
from pybricks.tools import wait, StopWatch, run_task, multitask

def connect_remote():

    try:
        # Search for a remote for 5 seconds.
        my_remote = Remote(timeout=15000)

        print("Connected!")

        return my_remote
        # Here you can write code that uses the remote.

    except OSError:

        print("Could not find the remote.")

        # Here you can make your robot do something
        # without the remote.

async def acontroller():
    INITIAL_DELAY = 350
    REPEAT_DELAY = 100
    watch = StopWatch()

    while True:
        await wait(0)
        
        pressed = ()

        # Wait until a button is pressed.
        while not pressed:
            await wait(0)
            pressed = remote.buttons.pressed()
            
        print(pressed)

        # Wait until all buttons are released.
        watch.reset()
        while pressed:
            await wait(0)
            if watch.time() > INITIAL_DELAY:
                print(pressed)
                await wait(REPEAT_DELAY)
            pressed = remote.buttons.pressed()
                       
def controller():
    INITIAL_DELAY = 350
    REPEAT_DELAY = 100
    watch = StopWatch()

    while True:
        pressed = ()

        # Wait until a button is pressed.
        while not pressed:
            pressed = remote.buttons.pressed()
            
        print(pressed)

        # Wait until all buttons are released
        # Or repeat if held down longer than INITIAL_DELAY
        watch.reset()
        while pressed:
            if watch.time() > INITIAL_DELAY:
                print(pressed)
                wait(REPEAT_DELAY)
            pressed = remote.buttons.pressed()
                       

# Constants
LONG_PRESS_DURATION = 350  # in milliseconds

def handle_button_presses():
    """
    generated by ChatGPT
    
    "Help me write a function to handle long button presses on the Lego control+ 
    controller for Pybricks using micropython"
    """
    watch = StopWatch()
    pressed_buttons = set()

    while True:
        buttons = set(remote.buttons.pressed())

        # Check for new button press
        new_presses = buttons - pressed_buttons
        released = pressed_buttons - buttons

        for btn in new_presses:
            watch.reset()  # Start timing when a button is pressed

        for btn in buttons:
            if watch.time() > LONG_PRESS_DURATION:
                print(f"Long press detected on: {btn}")
                # Handle long press
                # Optionally, prevent repeat by removing from pressed_buttons
                # pressed_buttons.remove(btn)

        for btn in released:
            if watch.time() <= LONG_PRESS_DURATION:
                print(f"Short press detected on: {btn}")
                # Handle short press

        pressed_buttons = buttons
        wait(50)  # Check 20 times per second

remote = connect_remote()

# Run the AI function
#handle_button_presses()

# my version 
run_task(controller())
